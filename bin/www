#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('jam-with-friends:server');
var http = require('http');
var User = require('../user');

var Device = require('../devices.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Inject socket.io
 */

var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

server.on('error', onError);

server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  devices = {
    launchpad: null
  };

  io.on('connection', function(socket){
    console.log('Launchpad connected');
    socket.emit('hello');

    socket.on('user:position', function(d){
      switch(d){
        case User.Position.HOST:
          console.log('Host chosen...');
          socket.position = User.Position.HOST;
          break;
        case User.Position.CLIENT:
          socket.emit('session:name');
          socket.position = User.Position.CLIENT;
          break;
        default:
          socket.emit('disconnect');
          socket.disconnect();
          break;
      }
    });

    socket.on('session:name', function(d){
      if(socket.position === User.Position.CLIENT){
        socket.emit('device:select');

        socket.on('device:select', function(device){
          switch(device.id){
            case 'launchpad':
              socket.device = new Device.Launchpad(socket);
              var midi = require('midi');
              var input = new midi.input();
              input.openVirtualPort("Wireless Novation Launchpad S - " + device.name);
              devices.launchpad = socket.device;

              devices.launchpad.triggers.anyButtonPress.bind(function(x, y){
                devices.launchpad.actions.toggleButton.call(x, y, 3);
                console.log('Things happened: ' + x + y);
                io.emit('button:press', {for: 'everyone'});
              });
              io.emit('launchpad:connect', {for: 'everyone'});
              break;
          }
        });
      }
    });

    socket.on('disconnect', function(){
      io.emit('launchpad:disconnect', {for: 'everyone'});
      console.log('Launchpad is gone');
    });
  });
}
